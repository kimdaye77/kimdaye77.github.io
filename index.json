[{"content":"","date":null,"permalink":"/","section":"","summary":"","title":""},{"content":"FE 뉴스스탠드 3주차 # 참고 fe-newsstand #3\n3주차부터 블로그 시작하는 것이라 제목은 #1이다.\n프로젝트 설명 # 네이버 뉴스스탠드와 비슷한 기능을 하는 뉴스스탠드를 만드는 프로젝트다. 총 4주 기간동안 진행한다. 지금까지 2주가 지났고 오늘 3주차를 시작한다. 현재까지 구현한 기능은 다음과 같다.\n프로젝트 폴더 구조 트리 # fe-newsstand ├─ .DS_Store ├─ assets │ ├─ icons │ └─ images │ └─ logo │ ├─ dark │ └─ light ├─ css │ ├─ color.css │ ├─ index.css │ └─ reset.css ├─ data │ ├─ news.json │ ├─ press.json │ └─ recentNews.json ├─ index.html ├─ js │ ├─ app.js │ ├─ constants │ │ └─ constants.js │ ├─ sections │ │ ├─ header.js │ │ ├─ mainView.js │ │ └─ recentNews.js │ └─ utils │ ├─ autoRolling.js │ ├─ changeView.js │ ├─ checkPage.js │ ├─ getDate.js │ ├─ makeGridView.js │ ├─ makeListView.js │ └─ reload.js └─ readme.md Feature list # 개발 완료한 기능 # [기본 화면] - [x] 메인 로고 클릭 시 새로고침 - [x] 시스템 날짜 표현 [최신 뉴스 영역] - [x] 최신 뉴스 5초마다 5개 자동 롤링 - [x] 좌우 영역 1초 차이 롤링 - [x] 마우스 호버 시 롤링 일시정지 [그리드 뷰] - [x] 새로고침 시 언론사 로고 랜덤 표시 - [x] 첫 페이지, 마지막 페이지 버튼 disable - [x] 뷰 방식 변경 - [x] 마우스 호버 시 구독하기 버튼 표시 [리스트 뷰] - [x] 클릭한 카테고리의 현재 언론사 순서와 총 언론사 수 표시 - [x] 버튼 클릭 시 해당 카테고리의 다음 언론사로 넘어가기 - [x] 20s간 프로그레스 바 진행 후, 다음 언론사로 넘어가기 남은 기능 # (오늘 구현한 기능은 형광펜 표시)\n구독하기/해지하기 버튼 리스트 뷰 메인 로고 썸네일에 마우스 호버 시 5% 확대 구독한 언론사 탭 버튼 이벤트 구독한 언론사 페이지 구현 \u0026lt;- 구현하다가 개발 시간이 끝났다. 그리드 뷰 마지막 페이지 언론사 로고 갯수 96개 아닐 때 그리드 표시 다크모드 (추가 미션) 개발한 기능 시연 # 원래 카테고리 바에 프로그레스 바 진행이 나타나야 하는데 개발 도중에 끝나서 캡쳐를 못했다.\n어려웠던 점 # 문제 상황 # 이벤트 위임을 적용하고 싶어서 리스트뷰전체에서 이벤트를 받았다. 리스트뷰에서 언론사 구독하기 클릭이벤트를 등록할 때 페이지가 증가할수록 그 수만큼 이벤트가 중첩됐다.\n시행착오 #1 # removeEventListener를 통해 이벤트를 제거하려고도 해봤으나 제거하면 클릭을 한번밖에 못함\n시행착오 #2 # 각 언론사 뉴스 정보를 세분화해서 그려주는 drawPressInfo.js 파일에서 각각의 구독하기 버튼에 제한해서 클릭이벤트를 적용\n해결 코드 # # pressNewsInfo.js 이벤트 리스너 등록한 부분 export function drawPressInfo(category_news, subscribedPress, press) { const press_news = document.querySelector(\u0026#34;.press-news\u0026#34;); press_news.innerHTML = `\u0026lt;div class=\u0026#34;press-info\u0026#34;\u0026gt; \u0026lt;img id=\u0026#34;press-logo\u0026#34; alt=\u0026#34;press-logo\u0026#34; src=\u0026#34;${category_news.src}\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;edit-date\u0026#34;\u0026gt;${category_news.edit_date} 편집\u0026lt;/span\u0026gt; \u0026lt;div class=\u0026#34;sub\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;sub subscribe\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../assets/icons/plus.svg\u0026#34; /\u0026gt; \u0026lt;span\u0026gt;구독하기\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;sub cancel\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../assets/icons/closed.svg\u0026#34; /\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;`; showSubscribeButton(subscribedPress, press); const newDiv = document.createElement(\u0026#34;div\u0026#34;); newDiv.classList.add(\u0026#34;news-content\u0026#34;); press_news.appendChild(newDiv); const sub_btn = document.querySelector(\u0026#34;.press-info .sub\u0026#34;); sub_btn.addEventListener(\u0026#34;click\u0026#34;, (e) =\u0026gt; handleClick(e, subscribedPress, press) ); } 언론사 정보를 그려주는 함수에서 버튼에 클릭 이벤트를 등록했다. 버튼이 클릭되면 아래의 함수가 실행된다. 아래의 함수는 버튼이 구독한 상태에서 누른 버튼인지, 아닌 상태에서 누른 버튼인지를 해당 버튼의 클래스로 조건문을 판볋한다. cancel이 클래스에 포함되어 있을 경우, 현재 리스트 뷰의 버튼은 해지하기 버튼이므로 구독한 상태를 의미한다. 따라서 해당 버튼이 눌렸을 때에는 해지 처리를 아닌 경우에는 구독 처리를 해주었다.\n# pressNewsInfo.js 클릭 이벤트가 실행시켜주는 함수 function handleClick(e, subscribedPress, press) { const btn_target = e.target.closest(\u0026#34;button\u0026#34;); const press_news = document.querySelector(\u0026#34;.press-news\u0026#34;); const newDiv = document.createElement(\u0026#34;div\u0026#34;); if (btn_target) { console.log(subscribedPress, subscribedPress.includes(press)); if (btn_target.classList.contains(\u0026#34;cancel\u0026#34;)) { console.log(\u0026#34;해지\u0026#34;); newDiv.classList.add(\u0026#34;popup\u0026#34;, \u0026#34;alert\u0026#34;); newDiv.innerHTML = ` \u0026lt;div class=\u0026#34;message\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;press\u0026#34;\u0026gt;${press}\u0026lt;/span\u0026gt;을(를)\\n구독해지하시겠습니까?\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;buttons\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;btn-yes\u0026#34;\u0026gt;예, 해지합니다\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;btn-no\u0026#34;\u0026gt;아니오\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt;`; press_news.appendChild(newDiv); const btn = document.querySelector(\u0026#34;.buttons\u0026#34;); btn.addEventListener(\u0026#34;click\u0026#34;, (e) =\u0026gt; checkAnswer(e, subscribedPress, press) ); } else { console.log(\u0026#34;현재 언론사\u0026#34;, press); subscribedPress = [...subscribedPress, press]; newDiv.classList.add(\u0026#34;popup\u0026#34;, \u0026#34;snackbar\u0026#34;); newDiv.textContent = \u0026#34;내가 구독한 언론사에 추가되었습니다.\u0026#34;; press_news.appendChild(newDiv); showSubscribeButton(subscribedPress, press); parentCallback(subscribedPress); newDiv.addEventListener(\u0026#34;animationend\u0026#34;, handleAnimationEnd); }}} 아직 리팩토링 전이라 매우 코드가 보기 힘들다. console.log도 안 지운 코드 (\u0026hellip;)\n향후 계획 # 코드 리뷰하면서 같은 팀원 분 중 한 분이 고수신데 store.js, 옵저버 패턴을 사용했다. 지금 건드렸다간 버그 투성이일 것 같아서 못했지만 기능 구현을 완료하고 리팩토링을 할 때 한 번 사용하고 싶다. 내일은 내가 구독한 언론사 탭을 구현해야 한다. 이 탭은 기본 틀은 카테고리 별 뉴스와 같아서 카테고리를 그려주는 함수의 파라미터를 손보다가 개발 시간이 끝나서 현재 지금 안 돌아가는 상태로 존재한다. ㅎㅎ 내일은 버그를 고쳐야겠다. ","date":"17 July 2023","permalink":"/posts/fe-newsstand/fe-newsstand1/","section":"Posts","summary":"FE 뉴스스탠드 3주차 # 참고 fe-newsstand #3","title":"[현대 소프티어] FE 뉴스스탠드 #1"},{"content":"","date":null,"permalink":"/tags/newsstand/","section":"Tags","summary":"","title":"newsstand"},{"content":"","date":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/tags/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C/","section":"Tags","summary":"","title":"프론트엔드"},{"content":"","date":null,"permalink":"/tags/%ED%98%84%EB%8C%80%EC%86%8C%ED%94%84%ED%8B%B0%EC%96%B4/","section":"Tags","summary":"","title":"현대소프티어"},{"content":"Hugo와 Github page를 이용한 블로그 제작 # 블로그 제작 결심 # 원래도 공부하고 시간이 지나면 까먹고 같은 것을 찾아보는 것을 깨닫고 새롭게 안 것을 기록해야 할 필요성을 느꼈다. 생각만 하고 흐지부지 되던 차에 과 방학 행사 중 하나로 블로그 챌린지를 진행한다고 해서 블로그를 개발하게 되었다. 또한 4학년 여름 방학 2개월동안 현대 소프티어 부트캠프를 수료하는데 여기서 배운 것들을 기록하면 정말 좋을 것 같았다.\nHugo를 선택한 이유 # jekyll\n- ruby 기반 - 한글 레퍼런스가 많다 - 빌드 시 시간이 오래 걸린다. (이게 가장 큰 단점인듯) Hugo - Golang 기반 - 가장 빠르다. - 한글 레퍼런스가 적다. Hexo\n- JavaScript 기반 - 속도는 jekyll보다 빠르고 hugo보다 느리다. - 중국 레퍼런스가 많다. 이렇게 세 가지가 유명한 것 같다. 검색해보니까 jekyll에서 hugo로 넘어간 글이 보이고 hugo가 빌드 시 빠르다는 것, 그리고 테마를 구경하고 마음에 든 것이 있어서 hugo를 선택했다.\nHugo 설치 # 설치는 os에 따라 다르다. 현재 2개월 간 시한부 맥북 신세라 (\u0026hellip;) brew install을 통해 설치해주었다. 윈도우는 본인이 사용하고 싶은 테마가 SCSS를 포함하고 있으면 확장 버전을 따로 설치해야 하는 것 같았다.\n# hugo 설치 $ brew install hugo # hugo 버전 확인 $ hugo version Git 레포지토리 생성 # Git 레포지토리는 총 2개 생성해주면 된다.\n블로그 포스트 저장용 렌더링용 페이지 (github.io) 2번의 경우에는 원하는 레포지토리 이름이 있더라도 {username}/github.io로 하고 배포한 다음, 이름을 수정해야 한다. Hugo 블로그 프로젝트 생성 # 원하는 프로젝트 이름으로 hugo 프로젝트 hugo new site blog를 생성한다. 나의 경우에는 blog로 프로젝트 이름을 지정했다.\nHugo 테마 적용 # 테마마다 다운로드하는 방법이 친절하게 설명되어 있다. 나의 경우에는 congo 테마를 사용했다. 여기서부터는 Go 언어도 설치가 된 상태여야 한다. Go 역시 brew를 통해 설치했다.\nHugo 프로젝트 디렉토리 구성 # 테마마다 디렉토리 구조가 다른데 형식(이름)을 같게 해주어야 한다. 아래는 내가 적용한 테마의 기본 구조이다.\n. ├── assets │ └── img │ └── author.jpg ├── config │ └── _default ├── content │ ├── _index.md │ ├── about.md │ └── posts │ ├── _index.md │ ├── first-post.md │ └── another-post │ ├── aardvark.jpg │ └── index.md └── themes └── congo 이후로는 샘플과 깃허브 코드들을 보면서 config/_default/params.toml등을 원하는 설정으로 변경했다.\nGithub 연동 # Repository 연결 # 1. 포스트 관리용으로 만든 레포지토리와 연결 # git remote add origin \u0026lt;repo 주소\u0026gt;\n2. 호스팅용 레포지토리와 연결 # git submodule add -b main \u0026lt;repo 주소\u0026gt; public 포스트 업로드 # 이후 포스트를 쓰고 hugo -t \u0026lt;테마이름\u0026gt;을 하면 public에 html 파일이 생성된다. 생성된 public 디렉토리에 들어가서 변경된 부분들을 commit 해주면 본인의 github page 주소에 반영이 된다.\nHugo와 Github page를 이용한 블로그 제작 총평 # 블로그 제작 후기 # 테마가 예쁘고 다크모드 구현, 태그, 검색 등 다양한 기능이 들어있어서 좋았다.\n내가 고른 테마는 다국어 번역 기능을 지원하지만 한국어를 지원해주지 않았다. 나중에 시간적 여유가 생긴다면 한국어로 pr을 날려봐도 좋을 것 같다.\n향후 계획 # 자동 배포를 통한 자동화 도메인을 구매 후 적용 (가능하다면) ","date":"15 July 2023","permalink":"/posts/create-blog/create-blog/","section":"Posts","summary":"Hugo와 Github page를 이용한 블로그 제작 # 블로그 제작 결심 # 원래도 공부하고 시간이 지나면 까먹고 같은 것을 찾아보는 것을 깨닫고 새롭게 안 것을 기록해야 할 필요성을 느꼈다.","title":"Hugo 블로그 제작기"},{"content":"","date":null,"permalink":"/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%A0%9C%EC%9E%91%EA%B8%B0/","section":"Tags","summary":"","title":"블로그 제작기"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"}]